           #################################
          ###                          #####
        ###     ######################### ##
      ###     ###                   ##### ##
    ####     ########################  ## ##
  ####                          ###    ## ##
####                          ####     ## ##
################################ #     ## ##
##                     #     ##  #  ## ## ##
##                     #     ##  #  ## ## ##
##                     #     ##  #  ##### ##
##                     #     ##  # ###### ##
##                     #     ##  # #  ### ##
##                     #     ##  ###  ### ##
##                     #     ##  ##    ## ##
##########             #     ##  ##    #  ##
##       #             #     ##  ##      ###
##       #             #     ##  #      ### 
##       #             #     ##       ###   
##       ###############     ##     ####    
##                           ##   ####      
##                           ## ####        
##                           #####          
################################            

############# [J][C]ube[W]are ##############
#   Be responsible. Code for the future.   #
#         (c) 2025-2025, JCubeWare         #
############################################

##====[ VARIABLES ]====##

#JCUBEMAKE
 JCUBEMAKE.VENDOR = JCubeWare
 JCUBEMAKE.NAME = JCubeMakefile
 JCUBEMAKE.DISPLAY = [J][C]ube[Makefile]
#JCUBEMAKE.VERSION.
  JCUBEMAKE.VERSION.MAJOR = 0
  JCUBEMAKE.VERSION.MINOR = 0
  JCUBEMAKE.VERSION.REVISION = 1
  JCUBEMAKE.VERSION.STRING = $(JCUBEMAKE.VERSION.MAJOR).$(JCUBEMAKE.VERSION.MINOR).$(JCUBEMAKE.VERSION.REVISION)
#JCUBEMAKE.PROJECT.
# JCUBEMAKE.PROJECT.VERSION.
 JCUBEMAKE.PROJECT.VERSION.STRING = $(JCUBEMAKE.PROJECT.VERSION.MAJOR).$(JCUBEMAKE.PROJECT.VERSION.MINOR).$(JCUBEMAKE.PROJECT.VERSION.REVISION)
#JCUBEMAKE.TARGET.
# JCUBEMAKE.TARGET.WIN32.
   JCUBEMAKE.TARGET.WIN32.NAME = Win32
   JCUBEMAKE.TARGET.WIN32.BASE_NAME = $(JCUBEMAKE.PROJECT.NAME)32_$(JCUBEMAKE.PROJECT.VERSION.STRING)
   JCUBEMAKE.TARGET.WIN32.EXECUTABLE_NAME = $(JCUBEMAKE.TARGET.WIN32.BASE_NAME).exe
   JCUBEMAKE.TARGET.WIN32.LIB_NAME = $(JCUBEMAKE.TARGET.WIN32.BASE_NAME).dll
   JCUBEMAKE.TARGET.WIN32.COMPILER = i686-w64-mingw32-gcc-posix
   JCUBEMAKE.TARGET.WIN32.STATIC_LIB_NAME = $(JCUBEMAKE.TARGET.WIN32.BASE_NAME).a
   JCUBEMAKE.TARGET.WIN32.STATIC_COMPILER = i686-w64-mingw32-ar
#  JCUBEMAKE.TARGET.WIN32.INSTALL_HEADER_PATH
#  JCUBEMAKE.TARGET.WIN32.INSTALL_LIB_PATH
# JCUBEMAKE.TARGET.WIN64.
   JCUBEMAKE.TARGET.WIN64.NAME = Win64
   JCUBEMAKE.TARGET.WIN64.BASE_NAME = $(JCUBEMAKE.PROJECT.NAME)64_$(JCUBEMAKE.PROJECT.VERSION.STRING)
   JCUBEMAKE.TARGET.WIN64.EXECUTABLE_NAME = $(JCUBEMAKE.TARGET.WIN64.BASE_NAME).exe
   JCUBEMAKE.TARGET.WIN64.LIB_NAME = $(JCUBEMAKE.TARGET.WIN64.BASE_NAME).dll
   JCUBEMAKE.TARGET.WIN64.COMPILER = x86_64-w64-mingw32-gcc-posix
   JCUBEMAKE.TARGET.WIN64.STATIC_LIB_NAME = $(JCUBEMAKE.TARGET.WIN64.BASE_NAME).a
   JCUBEMAKE.TARGET.WIN64.STATIC_COMPILER = x86_64-w64-mingw32-ar
#  JCUBEMAKE.TARGET.WIN64.INSTALL_HEADER_PATH
#  JCUBEMAKE.TARGET.WIN64.INSTALL_LIB_PATH
# JCUBEMAKE.TARGET.LINUX.
   JCUBEMAKE.TARGET.LINUX.NAME = Linux
   JCUBEMAKE.TARGET.LINUX.BASE_NAME = $(JCUBEMAKE.PROJECT.NAME)_$(JCUBEMAKE.PROJECT.VERSION.STRING)
   JCUBEMAKE.TARGET.LINUX.EXECUTABLE_NAME = $(JCUBEMAKE.TARGET.LINUX.BASE_NAME)
   JCUBEMAKE.TARGET.LINUX.LIB_NAME = lib$(JCUBEMAKE.TARGET.LINUX.BASE_NAME).so
   JCUBEMAKE.TARGET.LINUX.COMPILER = gcc
   JCUBEMAKE.TARGET.LINUX.STATIC_LIB_NAME = lib$(JCUBEMAKE.TARGET.LINUX.BASE_NAME).a
   JCUBEMAKE.TARGET.LINUX.STATIC_COMPILER = ar
   JCUBEMAKE.TARGET.LINUX.INSTALL_HEADER_PATH = /usr/include/$(JCUBEMAKE.TARGET.LINUX.BASE_NAME)
   JCUBEMAKE.TARGET.LINUX.INSTALL_LIB_PATH = /usr/lib/
#JCUBEMAKE.GRAPHICS.
 JCUBEMAKE.GRAPHICS.INFO = "[@]"
 JCUBEMAKE.GRAPHICS.SUCCESS = "[OK]"
 JCUBEMAKE.GRAPHICS.WARNING = "[!]"
 JCUBEMAKE.GRAPHICS.ERROR = "[X]"
 JCUBEMAKE.GRAPHICS.FATAL = "[!X!]"
 JCUBEMAKE.GRAPHICS.SECTION_PREFIX = "[]"
 JCUBEMAKE.GRAPHICS.SUBSECTION_PREFIX = "  *"
#JCUBEMAKE.COMPILATION.
# JCUBEMAKE.COMPILATION.DIRNAME.
  JCUBEMAKE.COMPILATION.DIRNAME.SOURCE = source
  JCUBEMAKE.COMPILATION.DIRNAME.TESTS = tests
  JCUBEMAKE.COMPILATION.DIRNAME.BUILD = _build
  JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS = _objs
  JCUBEMAKE.COMPILATION.DIRNAME.BUILT_TESTS = $(JCUBEMAKE.COMPILATION.DIRNAME.TESTS)/$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)
# JCUBEMAKE.COMPILATION.TARGET.  
   JCUBEMAKE.COMPILATION.TARGET.LINUX = false
   JCUBEMAKE.COMPILATION.TARGET.WIN32 = false
   JCUBEMAKE.COMPILATION.TARGET.WIN64 = false
 JCUBEMAKE.COMPILATION.OS = Linux
 JCUBEMAKE.COMPILATION.FLAGS = -Wall -Wextra -Wpedantic -I. -I$(JCUBEMAKE.COMPILATION.DIRNAME.SOURCE) -fPIC -Os
 JCUBEMAKE.COMPILATION.FLAGS += $(JCUBEMAKE.PROJECT.FLAGS)

##====[ PROJECT SETTINGS ]====##

include ProjectConfiguration.mk

JCUBEMAKE.PROJECT.UPPERCASE = $(shell echo $(JCUBEMAKE.PROJECT.NAME) | tr a-z A-Z)

JCUBEMAKE.COMPILATION.FLAGS += -D$(JCUBEMAKE.PROJECT.UPPERCASE)_NAME=\"$(JCUBEMAKE.PROJECT.NAME)\"
JCUBEMAKE.COMPILATION.FLAGS += -D$(JCUBEMAKE.PROJECT.UPPERCASE)_VERSION=\"$(JCUBEMAKE.VERSION.STRING)\"

##====[ COMPILING SETTINGS ]====##

JCUBEMAKE.SOURCE.CODE = $(shell find $(JCUBEMAKE.COMPILATION.DIRNAME.SOURCE) -name "*.c")
JCUBEMAKE.SOURCE.HEADERS = $(shell find $(JCUBEMAKE.COMPILATION.DIRNAME.SOURCE) -name "*.h")
JCUBEMAKE.SOURCE.OBJECTS = $(JCUBEMAKE.SOURCE.CODE:.c=.o)

JCUBEMAKE.TESTS.CODE = $(shell find $(JCUBEMAKE.COMPILATION.DIRNAME.TESTS) -name "*.c")
JCUBEMAKE.TESTS.OBJECTS = $(subst $(JCUBEMAKE.COMPILATION.DIRNAME.TESTS), $(JCUBEMAKE.COMPILATION.DIRNAME.TESTS)/$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD), $(JCUBEMAKE.TESTS.CODE:.c=))

##====[ CURRENT COMPILING OS ]====##

# Windows support is planned to be fully handled later.
# The building happens and that's good enough for now.
ifeq ($(OS), Windows_NT)
    JCUBEMAKE.COMPILATION.OS = Windows
endif

ifeq ($(JCUBEMAKE.COMPILATION.OS), Linux)
  JCUBEMAKE.COMPILATION.BASE_NAME = $(JCUBEMAKE.TARGET.LINUX.BASE_NAME)
  JCUBEMAKE.COMPILATION.EXECUTABLE_NAME = $(JCUBEMAKE.TARGET.LINUX.EXECUTABLE_NAME)
  JCUBEMAKE.COMPILATION.LIB_NAME = $(JCUBEMAKE.TARGET.LINUX.LIB_NAME)
  JCUBEMAKE.COMPILATION.STATIC_LIB_NAME = $(JCUBEMAKE.TARGET.LINUX.STATIC_LIB_NAME)
  JCUBEMAKE.COMPILATION.INSTALL_HEADER_PATH = $(JCUBEMAKE.TARGET.LINUX.INSTALL_HEADER_PATH)
  JCUBEMAKE.COMPILATION.INSTALL_LIB_PATH = $(JCUBEMAKE.TARGET.LINUX.INSTALL_LIB_PATH)
  JCUBEMAKE.COMPILATION.COMPILER = $(JCUBEMAKE.TARGET.LINUX.COMPILER) 
endif

JCUBEMAKE.COMPILATION.BUILD_PATH = $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.COMPILATION.OS)

##====[ OS TARGETS ]====##

ifeq ($(findstring $(JCUBEMAKE.TARGET.WIN32.NAME),$(JCUBEMAKE.PROJECT.TARGETS)), $(JCUBEMAKE.TARGET.WIN32.NAME))
    JCUBEMAKE.COMPILATION.TARGET.WIN32 = true
    JCUBEMAKE.SOURCE.OBJECTS.WIN32 = $(patsubst %.o,$(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.WIN32.NAME)/%.o, $(JCUBEMAKE.SOURCE.OBJECTS))
endif

ifeq ($(findstring $(JCUBEMAKE.TARGET.WIN64.NAME),$(JCUBEMAKE.PROJECT.TARGETS)), $(JCUBEMAKE.TARGET.WIN64.NAME))
    JCUBEMAKE.COMPILATION.TARGET.WIN64 = true
    JCUBEMAKE.SOURCE.OBJECTS.WIN64 = $(patsubst %.o,$(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.WIN64.NAME)/%.o, $(JCUBEMAKE.SOURCE.OBJECTS))
endif

ifeq ($(findstring $(JCUBEMAKE.TARGET.LINUX.NAME),$(JCUBEMAKE.PROJECT.TARGETS)), $(JCUBEMAKE.TARGET.LINUX.NAME))
    JCUBEMAKE.COMPILATION.TARGET.LINUX = true
    JCUBEMAKE.SOURCE.OBJECTS.LINUX = $(patsubst %.o,$(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.LINUX.NAME)/%.o, $(JCUBEMAKE.SOURCE.OBJECTS))
endif

##====[ DEFAULT TARGET ]====##

.PHONY: all
.DEFAULT_GOAL := all

all: clean StartHeader DirectoryHeader SetupDirectory CompileHeader CompileObjects TestsHeader BuildTests test
	@echo " "
	@echo "##====[ Final Status ]====##"
	@echo "$(JCUBEMAKE.GRAPHICS.SUCCESS) All tasks are finished."
	@echo "$(JCUBEMAKE.GRAPHICS.SUCCESS) $(JCUBEMAKE.PROJECT.NAME) is now fully setup."
	@echo "$(JCUBEMAKE.GRAPHICS.SUCCESS) Use 'make info' to get information regarding the build."
	@echo "$(JCUBEMAKE.GRAPHICS.SUCCESS) Use 'make install' to install the project."
	@echo " #==============# "
	@echo "##   FINISHED   ##"
	@echo " #==============# "

##====[ OBJECT FILE COMPILATION ]====##

$(JCUBEMAKE.COMPILATION.DIRNAME.BUILT_TESTS)/%: $(JCUBEMAKE.COMPILATION.DIRNAME.TESTS)/%.c
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Compiling \"$<\" into $@"
	@mkdir -p $(JCUBEMAKE.COMPILATION.DIRNAME.BUILT_TESTS)
	@$(JCUBEMAKE.COMPILATION.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -L./$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.COMPILATION.OS) -Wl,-rpath,./$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.COMPILATION.OS) -o $@ $< -l$(JCUBEMAKE.TARGET.LINUX.BASE_NAME)

%.o: %.c
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Compiling \"$<\""
ifeq ($(JCUBEMAKE.COMPILATION.TARGET.LINUX), true)
	@mkdir -p $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.LINUX.NAME)/$(@D)
	@$(JCUBEMAKE.TARGET.LINUX.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -o $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.LINUX.NAME)/$@ -c $< $(JCUBEMAKE.PROJECT.LIBS)
endif	
ifeq ($(JCUBEMAKE.COMPILATION.TARGET.WIN32), true)
	@mkdir -p $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.WIN32.NAME)/$(@D)
	@$(JCUBEMAKE.TARGET.WIN32.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -o $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.WIN32.NAME)/$@ -c $< $(JCUBEMAKE.PROJECT.LIBS)
endif
ifeq ($(JCUBEMAKE.COMPILATION.TARGET.WIN64), true)
	@mkdir -p $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.WIN64.NAME)/$(@D)
	@$(JCUBEMAKE.TARGET.WIN64.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -o $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$(JCUBEMAKE.TARGET.WIN64.NAME)/$@ -c $< $(JCUBEMAKE.PROJECT.LIBS)
endif

##====[ HEADERS ]====##

Header:
	@echo "##====[ $(JCUBEMAKE.DISPLAY) ]====##"
	@echo "Starting $(JCUBEMAKE.NAME) $(JCUBEMAKE.VERSION.STRING)"
	@echo "##====[ $(JCUBEMAKE.DISPLAY) ]====##"

StartHeader: Header
	@echo
	@echo "##====[ STARTING BUILD ]====##"
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Starting build for $(JCUBEMAKE.PROJECT.NAME)"

DirectoryHeader:
	@echo 
	@echo "##====[ 1. DIRECTORY SETUP ]====##"

CompileHeader:
	@echo 
	@echo "##====[ 2. COMPILATION ]====##"

TestsHeader:
	@echo 
	@echo "##====[ 3. TESTS ]====##"

##====[ ACTUAL TASKS ]====##

SetupDirectory:
	@rm -rf $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Creating '$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)' directory"
	@mkdir $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Creating '$(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)' directory"
	@mkdir $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)
	@for TargetOS in $(JCUBEMAKE.PROJECT.TARGETS) ; do \
		echo "$(JCUBEMAKE.GRAPHICS.INFO) Creating an object file directory for $$TargetOS" ; \
		mkdir $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$$TargetOS ; \
		mkdir $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)/$$TargetOS ; \
	done
	@echo "$(JCUBEMAKE.GRAPHICS.SUCCESS) Directory setup complete."

CompileObjects: $(JCUBEMAKE.SOURCE.OBJECTS)
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Initiating compilation for all targets."
ifeq ($(JCUBEMAKE.COMPILATION.TARGET.LINUX), true)
 ifeq ($(JCUBEMAKE.PROJECT.TYPE), EXECUTABLE)
	@$(JCUBEMAKE.TARGET.LINUX.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -o $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.LINUX.NAME)/$(JCUBEMAKE.TARGET.LINUX.EXECUTABLE_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.LINUX) $(JCUBEMAKE.PROJECT.LIBS)
 endif
 ifeq ($(JCUBEMAKE.PROJECT.TYPE), LIBRARY)
	@$(JCUBEMAKE.TARGET.LINUX.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -shared -o $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.LINUX.NAME)/$(JCUBEMAKE.TARGET.LINUX.LIB_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.LINUX) $(JCUBEMAKE.PROJECT.LIBS)
	@$(JCUBEMAKE.TARGET.LINUX.STATIC_COMPILER) rcs $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.LINUX.NAME)/$(JCUBEMAKE.TARGET.LINUX.STATIC_LIB_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.LINUX) $(JCUBEMAKE.PROJECT.LIBS)
 endif
endif
ifeq ($(JCUBEMAKE.COMPILATION.TARGET.WIN32), true)
 ifeq ($(JCUBEMAKE.PROJECT.TYPE), EXECUTABLE)
	@$(JCUBEMAKE.TARGET.WIN32.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -o $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.WIN32.NAME)/$(JCUBEMAKE.TARGET.WIN32.EXECUTABLE_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.WIN32) $(JCUBEMAKE.PROJECT.LIBS)
 endif
 ifeq ($(JCUBEMAKE.PROJECT.TYPE), LIBRARY)
	@$(JCUBEMAKE.TARGET.WIN32.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -shared -o $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.WIN32.NAME)/$(JCUBEMAKE.TARGET.WIN32.LIB_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.WIN32) $(JCUBEMAKE.PROJECT.LIBS)
	@$(JCUBEMAKE.TARGET.WIN32.STATIC_COMPILER) rcs $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.WIN32.NAME)/$(JCUBEMAKE.TARGET.WIN32.STATIC_LIB_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.WIN32) $(JCUBEMAKE.PROJECT.LIBS)
 endif
endif
ifeq ($(JCUBEMAKE.COMPILATION.TARGET.WIN64), true)
 ifeq ($(JCUBEMAKE.PROJECT.TYPE), EXECUTABLE)
	@$(JCUBEMAKE.TARGET.WIN64.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -o $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.WIN64.NAME)/$(JCUBEMAKE.TARGET.WIN64.EXECUTABLE_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.WIN64) $(JCUBEMAKE.PROJECT.LIBS)
 endif
 ifeq ($(JCUBEMAKE.PROJECT.TYPE), LIBRARY)
	@$(JCUBEMAKE.TARGET.WIN64.COMPILER) $(JCUBEMAKE.COMPILATION.FLAGS) -shared -o $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.WIN64.NAME)/$(JCUBEMAKE.TARGET.WIN64.LIB_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.WIN64) $(JCUBEMAKE.PROJECT.LIBS)
	@$(JCUBEMAKE.TARGET.WIN64.STATIC_COMPILER) rcs $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)/$(JCUBEMAKE.TARGET.WIN64.NAME)/$(JCUBEMAKE.TARGET.WIN64.STATIC_LIB_NAME) $(JCUBEMAKE.SOURCE.OBJECTS.WIN64) $(JCUBEMAKE.PROJECT.LIBS)
 endif
endif
	@echo "$(JCUBEMAKE.GRAPHICS.SUCCESS) Library compilation complete."

BuildTests: $(JCUBEMAKE.TESTS.OBJECTS)
	@echo "$(JCUBEMAKE.GRAPHICS.SUCCESS) Tests built. Running"

##====[ MAKEFILE OPTIONS ]====##

clean: Header
	@echo " #==============# "
	@echo "##   CLEANING   ##"
	@echo " #==============# "
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Starting build clean for: $(JCUBEMAKE.PROJECT.NAME)"
	@echo " "
	@echo "##====[ Removing Build Files ]====##"
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Removing '$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)' directory."
	@rm -rf $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Removing '$(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)' directory."
	@rm -rf $(JCUBEMAKE.COMPILATION.DIRNAME.OBJECTS)
	@echo "##====[ Removing Tests ]====##"
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Removing '$(JCUBEMAKE.COMPILATION.DIRNAME.TESTS)/$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)' directory."
	@rm -rf $(JCUBEMAKE.COMPILATION.DIRNAME.TESTS)/$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)
	@echo " "
	@echo " #==============# "
	@echo "##   FINISHED   ##"
	@echo " #==============# "

install: $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD) Header
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Installing $(JCUBEMAKE.PROJECT.NAME)"
	@mkdir -p $(JCUBEMAKE.COMPILATION.INSTALL_LIB_PATH)
	@rsync -a --include='*/' --include='*.h' --exclude='*' $(JCUBEMAKE.COMPILATION.DIRNAME.SOURCE)/ $(JCUBEMAKE.COMPILATION.INSTALL_HEADER_PATH)/
	@cp $(JCUBEMAKE.COMPILATION.BUILD_PATH)/$(JCUBEMAKE.COMPILATION.LIB_NAME) $(JCUBEMAKE.COMPILATION.INSTALL_LIB_PATH)
	@sudo ldconfig
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Installed. You can now compile objects using -l$(JCUBEMAKE.COMPILATION.EXECUTABLE_NAME)"

uninstall: $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD) Header
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Uninstalling $(JCUBEMAKE.PROJECT.NAME)"
	@rm -r $(JCUBEMAKE.TARGET.LINUX.INSTALL_HEADER_PATH)
	@rm $(JCUBEMAKE.TARGET.LINUX.INSTALL_LIB_PATH)/$(JCUBEMAKE.COMPILATION.LIB_NAME)
	@sudo ldconfig
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Uninstalling finished."

info:
	@echo
	@echo "#=====[ $(JCUBEMAKE.PROJECT.NAME) ]=====#"
	@echo -n "$(JCUBEMAKE.GRAPHICS.SECTION_PREFIX) Build Status: "
	@if [ -d "$(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)" ]; then \
		echo "READY"; \
	else \
		echo "NOT BUILT"; \
	fi
	@echo "$(JCUBEMAKE.GRAPHICS.SECTION_PREFIX) Project Information: "
	@echo "$(JCUBEMAKE.GRAPHICS.SUBSECTION_PREFIX) Name: $(JCUBEMAKE.PROJECT.NAME)"
	@echo "$(JCUBEMAKE.GRAPHICS.SUBSECTION_PREFIX) Build Directory: $(JCUBEMAKE.COMPILATION.DIRNAME.BUILD)"
	@echo "$(JCUBEMAKE.GRAPHICS.SUBSECTION_PREFIX) Target OS: $(JCUBEMAKE.PROJECT.TARGETS)"
	@echo "$(JCUBEMAKE.GRAPHICS.SUBSECTION_PREFIX) Type: $(JCUBEMAKE.PROJECT.TYPE)" 
	@echo "$(JCUBEMAKE.GRAPHICS.SUBSECTION_PREFIX) Building on: $(JCUBEMAKE.COMPILATION.OS)"

test: $(JCUBEMAKE.COMPILATION.DIRNAME.BUILT_TESTS) Header
	@echo "$(JCUBEMAKE.GRAPHICS.INFO) Running tests for $(JCUBEMAKE.PROJECT.NAME)"
	@TestIndex=1; \
	for test in $$(find $(JCUBEMAKE.COMPILATION.DIRNAME.BUILT_TESTS) -type f -executable); do \
		$${test} > /dev/null; \
		result=$$?; \
		printf "Test %2d%3c| " $$((TestIndex)) ""; \
		if [ $$result -eq 0 ] ; then \
			echo "[\e[1;32mOK\e[0m]"; \
		else \
			echo "[\e[1;31mFAIL\e[0m] ($$result)"; \
		fi; \
		TestIndex=`expr $$TestIndex + 1`; \
	done